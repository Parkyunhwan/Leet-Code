class Solution:
    def reconstructQueue(self, people: List[List[int]]) -> List[List[int]]:
        people = sorted(people, key=lambda x: (-x[0]))
        # heap = []
        # for person in people:
        #     heapq.heappush(heap, (-person[0], person[1]))

        result = []
        for i in range(len(people)):
            # h, k = heapq.heappop(heap)
            h, k = people[i]
            result.insert(k, [h, k])
            print(result)
        return result
'''
k는 앞에 서 있는 사람 중 자신의 키 !이상!인 사람들의 수이므로 같은 키를 포함하면서 k의 갯수를 만족시키는 탐욕조건을 사용해야한다.
따라서, k가 작은 것부터 넣고 k가 큰 값이 자신과 같은 키인 경우도 포함할 수 있게 한다.
결론 -> 첫번째 key값은 내림차순, 두번째 key값은 내림차순을 소팅

list insert시 범위를 넘어간 음수나 양수값은 처음과 끝 인덱스에 들어가게 된다.

해당 문제는 처음 부터 모든 리스트가 주어지므로 소팅을 통해 순서를 정해도 되고 heapq를 사용해도 된다.
속도는 리스트 소팅이 빠르게 나왔다.

두번 째 k를 오름차순 정렬 했을 때..
people = sorted(people, key=lambda x:(-x[0]))
                [[9, 0]]
                [[7, 0], [9, 0]]
                [[6, 0], [7, 0], [9, 0]]
                [[6, 0], [7, 0], [6, 2], [9, 0]]
                [[6, 0], [7, 0], [5, 2], [6, 2], [9, 0]]
                [[6, 0], [7, 0], [5, 2], [5, 3], [6, 2], [9, 0]]
                [[3, 0], [6, 0], [7, 0], [5, 2], [5, 3], [6, 2], [9, 0]]
                [[3, 0], [6, 0], [7, 0], [5, 2], [3, 4], [5, 3], [6, 2], [9, 0]]
                [[3, 0], [6, 0], [7, 0], [5, 2], [3, 4], [5, 3], [6, 2], [2, 7], [9, 0]]
                [[3, 0], [6, 0], [7, 0], [5, 2], [3, 4], [5, 3], [6, 2], [2, 7], [9, 0], [1, 9]]

두번 째 k를 내림차순 정렬 했을 때..
people = sorted(people, key=lambda x:(-x[0], x[1]))
                [[9, 0]]
                [[7, 0], [9, 0]]
                [[6, 0], [7, 0], [9, 0]]
                [[6, 0], [7, 0], [6, 2], [9, 0]]
                [[6, 0], [7, 0], [6, 2], [5, 3], [9, 0]]
                [[6, 0], [7, 0], [5, 2], [6, 2], [5, 3], [9, 0]]
                [[3, 0], [6, 0], [7, 0], [5, 2], [6, 2], [5, 3], [9, 0]]
                [[3, 0], [6, 0], [7, 0], [5, 2], [3, 4], [6, 2], [5, 3], [9, 0]]
                [[3, 0], [6, 0], [7, 0], [5, 2], [3, 4], [6, 2], [5, 3], [2, 7], [9, 0]]
                [[3, 0], [6, 0], [7, 0], [5, 2], [3, 4], [6, 2], [5, 3], [2, 7], [9, 0], [1, 9]]
'''